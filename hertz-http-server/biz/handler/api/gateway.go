// Code generated by hertz generator.

package api

import (
	"context"
	"io/ioutil"
	"log"

	api "github.com/Lortals/111cloudwego-apigateway/hertz-http-server/biz/model/api"
	additionService "github.com/Lortals/111cloudwego-apigateway/microservices/addition-service/kitex_gen/addition/management"
	divisionService "github.com/Lortals/111cloudwego-apigateway/microservices/division-service/kitex_gen/division/api"
	multiplicationService "github.com/Lortals/111cloudwego-apigateway/microservices/multiplication-service/kitex_gen/multiplication/management"
	"github.com/Lortals/111cloudwego-apigateway/microservices/student_service/kitex_gen/demo"
	"github.com/Lortals/111cloudwego-apigateway/utils"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/adaptor"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	kclient "github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/genericclient"
	"github.com/cloudwego/kitex/pkg/generic"
	"github.com/cloudwego/kitex/pkg/loadbalance"
	etcd "github.com/kitex-contrib/registry-etcd"
)

// AddNumbers .
// @router /add [POST]
func AddNumbers(ctx context.Context, c *app.RequestContext) {

	// inital declarations (pre-generated)
	var err error
	var req api.AdditionRequest

	// bind error params to req (pre-generated)
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// create new client (with loadbalancing, service discovery capabilities) using utils.GenerateClient feature
	additionClient, err := utils.GenerateClient("Addition")
	if err != nil {
		panic(err)
	}

	// binding req params to RPC reqest struct (following the request format declared in RPC service IDL)
	reqRpc := &additionService.AdditionRequest{
		FirstNum:  req.FirstNum,
		SecondNum: req.SecondNum,
	}

	// initate new RPC response struct (as declared in RPC service IDL). This response variable will be populated by MakeRpcRequst function
	var respRpc additionService.AdditionResponse

	// calling MakeRpcRequest method declared in the utils package
	err = utils.MakeRpcRequest(ctx, additionClient, "addNumbers", reqRpc, &respRpc)
	if err != nil {
		panic(err)
	}

	// initating and repackaging RPC response into new HTTP AdditionResponse
	resp := &api.AdditionResponse{
		Sum: respRpc.Sum,
	}

	// return to client as JSON HTTP response
	c.JSON(consts.StatusOK, resp)
}

// MultiplyNumbers .
// @router /multiply [POST]
func MultiplyNumbers(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.MultiplicationRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// create new client (with loadbalancing, service discovery capabilities) using utils.GenerateClient feature
	multiplicationClient, err := utils.GenerateClient("Multiplication")
	if err != nil {
		panic(err)
	}

	// binding req params to RPC reqest struct (following the request format declared in RPC service IDL)
	reqRpc := &multiplicationService.MultiplicationRequest{
		FirstNum:  req.FirstNum,
		SecondNum: req.SecondNum,
	}

	// initate new RPC response struct (as declared in RPC service IDL). This response variable will be populated by MakeRpcRequst function
	var respRpc multiplicationService.MultiplicationResponse

	// calling MakeRpcRequest method declared in the utils package
	err = utils.MakeRpcRequest(ctx, multiplicationClient, "multiplyNumbers", reqRpc, &respRpc)
	if err != nil {
		panic(err)
	}

	// initating and repackaging RPC response into new HTTP AdditionResponse
	resp := &api.MultiplicationResponse{
		Product: respRpc.Product,
	}

	// return to client as JSON HTTP response
	c.JSON(consts.StatusOK, resp)
}

// DivideNumbers .
// @router /divide [POST]
func DivideNumbers(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DivisionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// create new client (with loadbalancing, service discovery capabilities) using utils.GenerateClient feature
	divisionClient, err := utils.GenerateClient("Division")
	if err != nil {
		panic(err)
	}

	// binding req params to RPC reqest struct (following the request format declared in RPC service IDL)
	reqRpc := &divisionService.DivisionRequest{
		FirstNum:  req.FirstNum,
		SecondNum: req.SecondNum,
	}

	var respRpc api.DivisionResponse

	// calling MakeRpcRequest method declared in the utils package
	err = utils.MakeRpcRequest(ctx, divisionClient, "divideNumbers", reqRpc, &respRpc)
	if err != nil {
		panic(err)
	}

	resp := &api.DivisionResponse{
		Quotient: respRpc.Quotient,
	}

	// return to client as JSON HTTP response
	c.JSON(consts.StatusOK, resp)
}

// RegisterStudent .
// @router /student/register [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req demo.Student
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	//泛化调用的register
	cli := initGenericClient()
	httpReq, err := adaptor.GetCompatRequest(c.GetRequest())
	if err != nil {
		panic("get http req failed")
	}
	customReq, err := generic.FromHTTPRequest(httpReq)
	if err != nil {
		panic("get custom req failed")
	}
	resp, err := cli.GenericCall(ctx, "Register", customReq)
	if err != nil {
		panic("generic call failed" + err.Error())
	}
	c.JSON(consts.StatusOK, resp)
}

// GetStudent .
// @router /student/get [GET]
func Query(ctx context.Context, c *app.RequestContext) {
	var err error
	var req demo.QueryReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 泛化调用的query
	cli := initGenericClient()
	httpReq, err := adaptor.GetCompatRequest(c.GetRequest())
	if err != nil {
		panic("get http req failed")
	}
	customReq, err := generic.FromHTTPRequest(httpReq)
	if err != nil {
		panic("get custom req failed")
	}
	resp, err := cli.GenericCall(ctx, "Query", customReq)
	if err != nil {
		panic("generic call failed" + err.Error())
	}
	realResp := resp.(*generic.HTTPResponse)
	c.JSON(consts.StatusOK, realResp.Body)
}

// 泛化调用
func initGenericClient() genericclient.Client {
	r, err := etcd.NewEtcdResolver([]string{"127.0.0.1:2379"})
	if err != nil {
		log.Fatal(err)
	}

	//基于内存解析 IDL，支持热更新
	path := "../student.thrift"
	cont, err := ioutil.ReadFile(path)
	if err != nil {
		panic(err)
	}
	content := string(cont[:])

	includes := map[string]string{
		path: content,
	}

	p, err := generic.NewThriftContentProvider(content, includes)
	if err != nil {
		panic(err)
	}

	// dynamic update
	err = p.UpdateIDL(content, includes)
	if err != nil {
		panic("UpdateIDL failed")
	}

	// 构造HTTP类型的泛化调用
	g, err := generic.HTTPThriftGeneric(p)
	if err != nil {
		panic(err)
	}

	cli, err := genericclient.NewClient("student", g,
		kclient.WithResolver(r),
		kclient.WithLoadBalancer(loadbalance.NewWeightedRandomBalancer()))
	if err != nil {
		panic(err)
	}

	return cli
}
