// Code generated by hertz generator.

package api

import (
	"context"

	api "github.com/Lortals/111cloudwego-apigateway/hzsvr-http/biz/model/api"
	kapi "github.com/Lortals/111cloudwego-apigateway/rpc-services/student-service/kitex_gen/student/management"
	"github.com/Lortals/111cloudwego-apigateway/rpc-services/student-service/kitex_gen/student/management/studentservice"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	kclient "github.com/cloudwego/kitex/client"
)

// Register .
// @router /add-student-info [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.Student
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	cli, err := studentservice.NewClient("student-server",
		kclient.WithHostPorts("127.0.0.1:8889"))
	if err != nil {
		panic("err init client" + err.Error())
	}

	resp, err := cli.Register(context.Background(),
		&kapi.Student{
			Id:   req.ID,
			Name: req.Name,
			College: &kapi.College{
				Name:    req.College.Name,
				Address: req.College.Address,
			},
			Email: req.Email,
		})
	c.JSON(consts.StatusOK, resp)
}

// Query .
// @router /query [GET]
func Query(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.QueryReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	cli, err := studentservice.NewClient("student-server",
		kclient.WithHostPorts("127.0.0.1:8889"))
	if err != nil {
		panic("err init client:" + err.Error())
	}

	resp, err := cli.Query(context.Background(), &kapi.QueryReq{
		Id: req.ID,
	})
	if err != nil {
		panic("err query:" + err.Error())
	}

	c.JSON(consts.StatusOK, resp)
}
