// Code generated by Kitex v0.6.1. DO NOT EDIT.

package studentmanagement

import (
	"context"
	api "github.com/Lortals/111cloudwego-apigateway/microservices/student_service/kitex_gen/student/api"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return studentManagementServiceInfo
}

var studentManagementServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "StudentManagement"
	handlerType := (*api.StudentManagement)(nil)
	methods := map[string]kitex.MethodInfo{
		"registerStudent": kitex.NewMethodInfo(registerStudentHandler, newStudentManagementRegisterStudentArgs, newStudentManagementRegisterStudentResult, false),
		"getStudent":      kitex.NewMethodInfo(getStudentHandler, newStudentManagementGetStudentArgs, newStudentManagementGetStudentResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.1",
		Extra:           extra,
	}
	return svcInfo
}

func registerStudentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.StudentManagementRegisterStudentArgs)
	realResult := result.(*api.StudentManagementRegisterStudentResult)
	success, err := handler.(api.StudentManagement).RegisterStudent(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newStudentManagementRegisterStudentArgs() interface{} {
	return api.NewStudentManagementRegisterStudentArgs()
}

func newStudentManagementRegisterStudentResult() interface{} {
	return api.NewStudentManagementRegisterStudentResult()
}

func getStudentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.StudentManagementGetStudentArgs)
	realResult := result.(*api.StudentManagementGetStudentResult)
	success, err := handler.(api.StudentManagement).GetStudent(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newStudentManagementGetStudentArgs() interface{} {
	return api.NewStudentManagementGetStudentArgs()
}

func newStudentManagementGetStudentResult() interface{} {
	return api.NewStudentManagementGetStudentResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) RegisterStudent(ctx context.Context, req *api.RegisterStudentRequest) (r *api.RegisterStudentResponse, err error) {
	var _args api.StudentManagementRegisterStudentArgs
	_args.Req = req
	var _result api.StudentManagementRegisterStudentResult
	if err = p.c.Call(ctx, "registerStudent", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetStudent(ctx context.Context, req *api.GetStudentRequest) (r *api.GetStudentResponse, err error) {
	var _args api.StudentManagementGetStudentArgs
	_args.Req = req
	var _result api.StudentManagementGetStudentResult
	if err = p.c.Call(ctx, "getStudent", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
